@using Log4JDash.Web.Models
@model LogIndexViewModel
@{
    Layout = null;
}<!DOCTYPE html>
<html>
    <head>
        <meta name="viewport" content="width=device-width" />
        <title>List</title>
        <link rel="stylesheet" type="text/css" href="@Url.Content("~/assets/reset-css-2.0/reset.css")" />
        <link rel="stylesheet" type="text/css" href="@Url.Content("~/assets/my/css/log.css")" />
    </head>
    <body>
        <header>
            @{
                var source = Model.Query.Source.Value;
            }
            <h1>
                @if (source != null)
                {
                    var resetSource = new LogSourceModel (source.Id, null);
                    var latestPageModel = new LogQuery
                    {
                        Source = { Value = resetSource }
                    };
                    var latestPageRouteValues = latestPageModel.GetRouteValues ();

                    @source.Id
                    if (source.Size != null)
                    {
                        <span class="log-latest">
                            @Html.ActionLink("\u21BB", null, latestPageRouteValues)
                        </span>
                    }
                }
            </h1>

            <script type="text/javascript">
                'use strict';

                function suppressDefaults(form) {
                    function doSuppress(rootElement, suppressedElements) {
                        var children = rootElement.elements;

                        for (var i in children) {
                            var child = children[i];

                            if (child.tagName === 'INPUT') {
                                var defaultValue = child.getAttribute('data-default');
                                var suppressSubmission = defaultValue !== undefined &&
                                                         defaultValue !== null &&
                                                         child.value === defaultValue &&
                                                         !child.disabled;

                                if (suppressSubmission) {
                                    child.disabled = true;
                                    suppressedElements.push(child);
                                }
                            }

                            doSuppress(child, suppressedElements);
                        }
                    }

                    var suppressedElements = [];
                    try {
                        doSuppress(form, suppressedElements);
                    } catch(e) {
                        for (var i in suppressedElements) {
                            suppressedElements[i].disabled = false;
                        }
                        throw e;
                    }

                    var oldHandler = window.onbeforeunload;
                    window.onbeforeunload = function () {
                        try {
                            for (var i in suppressedElements) {
                                suppressedElements[i].disabled = false;
                            }
                        } finally {
                            oldHandler.apply(this, arguments);
                        }
                    }
                }
            </script>

            @using (Html.BeginForm (null, null, FormMethod.Get, new { @class = "log-query", onsubmit = "suppressDefaults(this);" }))
            {
                <div>
                    @Html.EditorFor(model => model.Query, null, String.Empty)
                </div>
                <div>
                    <input type="submit" value="Искать" />
                    @if (@Model.Events.Count >= Model.Query.Quantity)
                    {
                        var prevPageQuery = Model.Query.Clone ();
                        prevPageQuery.Offset += Model.Query.Quantity;
                        var prevPageRouteValues = prevPageQuery.GetRouteValues ();
                        <text>@Html.ActionLink("<", "List", prevPageRouteValues)</text>
                    }
                    @if (Model.Query.Offset > 0)
                    {
                        var nextPageQuery = Model.Query.Clone ();
                        nextPageQuery.Offset -= Model.Query.Quantity;
                        var nextPageRouteValues = nextPageQuery.GetRouteValues ();
                        <text>@Html.ActionLink(">", "List", nextPageRouteValues)</text>

                        var lastPageQuery = Model.Query.Clone ();
                        lastPageQuery.Offset = 0;
                        var lastPageRouteValues = lastPageQuery.GetRouteValues ();
                        <text>@Html.ActionLink("Последняя", "List", lastPageRouteValues)</text>
                    }
                    @Html.EditorFor(m => m.Query.Source, null, "Source")
                </div>
            }
        </header>

        <main>
            <ol class="log-list">
                @{
                    var isEmpty = true;
                    foreach (var @event in Model.Events)
                    {
                        isEmpty = false;
                        @Html.DisplayFor(_ => @event)
                    }
                }
            </ol>
            @if (isEmpty)
            {
                <div>Empty!</div>
            }
        </main>
    </body>
</html>
